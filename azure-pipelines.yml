# OpenUPM azure pipelines
name: $(Build.BuildId)

trigger: none

variables:
  # buildName:
  # repoUrl:
  # repoBranch:
  # packageName:
  # packageVersion:
  repoDir: repo
  registryUrl: http://package.openupm.com
  distTag: latest

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    echo repoDir: $(repoDir)
    echo registryUrl: $(registryUrl)
    echo repoUrl: $(repoUrl)
    echo repoBranch: $(repoBranch)
    echo packageName: $(packageName)
    echo packageVersion: $(packageVersion)
  displayName: 'Print environment'

- powershell: exit 1
  condition: and(succeeded(), eq(variables['buildName'], ''))
  displayName: 'Check variable buildName'

- powershell: exit 1
  condition: and(succeeded(), eq(variables['repoUrl'], ''))
  displayName: 'Check variable repoUrl'

- powershell: exit 1
  condition: and(succeeded(), eq(variables['repoBranch'], ''))
  displayName: 'Check variable repoBranch'

- powershell: exit 1
  condition: and(succeeded(), eq(variables['packageName'], ''))
  displayName: 'Check variable packageName'

- powershell: exit 1
  condition: and(succeeded(), eq(variables['packageVersion'], ''))
  displayName: 'Check variable packageVersion'

- script: |
    echo "##vso[build.updatebuildnumber]$(buildName)-$(Build.BuildId)"
  displayName: 'Update build number'

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- task: Npm@1
  inputs:
    command: install
  displayName: 'Install dependencies'

- script: |
    latestVersion=`npm --registry=$(registryUrl) show $(packageName) version` || latestVersion=0.0.0
    [[ -z "$latestVersion" ]] && latestVersion=0.0.0
    echo latestVersion=$latestVersion
    echo packageVersion=$(packageVersion)
    distTag=`node get-dist-tag.js $(packageVersion) $latestVersion`
    echo distTag=$distTag
    echo "##vso[task.setvariable variable=distTag;]$distTag"
  displayName: 'Update variable distTag'

- script: echo distTag=$(distTag)
  displayName: 'Print variable distTag'

- task: DeleteFiles@1
  inputs:
    contents: $(repoDir)
  displayName: 'Clean target folder'

- script: |
    git clone --depth 1 --branch $(repoBranch) $(repoUrl) $(repoDir)
    cd $(repoDir)
  displayName: 'Clone target repository'

- task: Npm@1
  inputs:
    command: custom
    workingDir: $(repoDir)
    customCommand: 'publish --tag=$(distTag) --registry=$(registryUrl)'
    customEndpoint: openupm
  displayName: 'Publish to OpenUPM with tag'
