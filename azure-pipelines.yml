# OpenUPM azure pipelines
name: $(Build.BuildId)

trigger: none

variables:
  ### context variables
  # repoUrl: https://github.com/owner/reponame
  # repoBranch: master
  # packageName: com.namespace.pkgname
  # packageVersion: semver
  # packageFolder: '' or path-to-package-json

  ### pre-defined variables
  repoDir: repo
  registryUrl: https://package.openupm.com
  distTag: latest

  ### generated variables
  # distTag: latest

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    echo repoUrl: $REPOURL
    echo repoBranch: $REPOBRANCH
    echo packageName: $PACKAGENAME
    echo packageVersion: $PACKAGEVERSION
    echo packageFolder: $PACKAGEFOLDER
    [[ -z "$REPOURL" ]] && echo 'variable repoUrl not found' && exit 1
    [[ -z "$REPOBRANCH" ]] && echo 'variable repoBranch not found' && exit 1
    [[ -z "$PACKAGENAME" ]] && echo 'variable packageName not found' && exit 1
    [[ -z "$PACKAGEVERSION" ]] && echo 'variable packageVersion not found' && exit 1
    exit 0
  displayName: 'Check context variables'

- script: |
    echo "##vso[build.updatebuildnumber]$(packageName)-$(packageVersion)-$(Build.BuildId)"
  displayName: 'Update build number'

- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- task: Npm@1
  inputs:
    command: install
  displayName: 'Install dependencies'

- task: DeleteFiles@1
  inputs:
    contents: $(repoDir)
  displayName: 'Clean $(repoDir) folder'

- script: git clone --depth 1 --branch $(repoBranch) $(repoUrl) $(repoDir)
  displayName: 'Clone to $(repoDir) repository'

- script: |
    # Get LATEST_VERSION
    LATEST_VERSION=`npm --registry=$(registryUrl) show $(packageName) version` || LATEST_VERSION=0.0.0
    [[ -z "$LATEST_VERSION" ]] && LATEST_VERSION=0.0.0
    echo LATEST_VERSION: $LATEST_VERSION
    echo packageVersion: $(packageVersion)
    # Get DIST_TAG
    DIST_TAG=`node getDistTag.js $(packageVersion) $LATEST_VERSION`
    echo DIST_TAG=$DIST_TAG
    echo "##vso[task.setvariable variable=distTag;]$DIST_TAG"
  displayName: 'Set distTag variable'

- script: |
    if [ -d "$(repoDir)/$(packageFolder)" ]; then
      echo packageFolder: $(repoDir)/$(packageFolder)
      echo "##vso[task.setvariable variable=packageFolder;]$(repoDir)/$(packageFolder)"
    else
      echo packageFolder: $(repoDir)
      echo "##vso[task.setvariable variable=packageFolder;]$(repoDir)"
    fi
  displayName: 'Verify packageFolder variable'

- script: |
    cd "$(packageFolder)"
    if [ -f "package.json" ]; then
      npm install -g json
      json -I -f package.json -e 'this.publishConfig = { registry: "https://package.openupm.com" }'
      cat package.json
    fi
  displayName: 'Override publishConfig'

- task: Npm@1
  inputs:
    command: custom
    customCommand: 'publish --tag=$(distTag) --registry=$(registryUrl)'
    customEndpoint: openupm
    workingDir: $(packageFolder)
  displayName: 'Publish to OpenUPM'
